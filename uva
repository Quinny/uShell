#!/usr/bin/env python
from uvaclient import uvaclient
import sys
import requests
import os
import utils

'''

The main driver for the commandline interface

'''

# Each command consists of a function and a help/usage string
class command():
    def __init__(self, func, h):
        self.func = func
        self.h = h

    def __call__(self, *args):
        self.func(*args)

# List the last n user submissions
def sub_command(client, args):
    resp = client.submissions(*args)
    for i in resp:
        print "Problem: %-16s    Verdict: %-16s  Runtime: %-8s Language Used: %-10s"  % (i["problem"]['title'], i["verdict"], i["runtime"], i["language"])

# Submit a problem for judging
def submit_command(client, args):
    print "Logging in..."
    client.login()
    print "Submitting..."
    client.submit(*args)
    print "Done!"

# Download and open the PDF problem statement for a given problem
def display_command(client, args):
    url = client.get_baseurl() + "external/{0}/{1}.pdf"\
            .format(int(args[0]) / 100, args[0])
    resp = requests.get(url, stream=True)
    with open(args[0] + ".pdf", "wb") as f:
        for block in resp.iter_content(1024):
            f.write(block)
    os.system("open " + args[0] + ".pdf")

# Show the help text for each command
def help_command(client, args):
    print_commands()

def print_commands():
    print "Commands:"
    for name in commands.keys():
        if (name != "help"):
          print "\t" + name + " - " + commands[name].h

# View the leaderboard for a given problem
def leaderboard_command(client, args):
    resp = client.leaderboard(*args)
    print "Problem " + str(args[0]) + ": " + client.get_problem_name(args[0])
    for i in resp:
        print "Rank: " + str(i['rank'])  + " User: " + i['uname'] + " Runtime: " + str(i['run']) + "ms"

# View a given users submissions for a problem
def user_submissions_command(client, args):
    resp = client.user_submissions(*args)
    for i in resp:
        print "Problem: %-16s    Verdict: %-16s  Runtime: %-8s Language Used: %-10s"  % (i["problem"]['title'], i["verdict"], i["runtime"], i["language"])

# Get the test cases and expected output for a problem from udebug
def testcases_command(client, args):
    resp = client.testcases(args[0])
    if (resp[0] == ""):
        print "There were no pre-generated test cases available :("
    else :
        utils.write_file(args[0] + ".test", resp[0])
        utils.write_file(args[0] + ".answer", resp[1])
        print "Test cases saved to " + args[0] + ".test"
        print "Excepted output saved to " + args[0] + ".answer"

if __name__ == "__main__":
    commands = {
        "help": command(help_command, ""),
        "submissions": command(sub_command, "Usage: uva submissions [n]"),
        "submit": command(submit_command, "Usage: uva submit <problem_number> <source_file> [language code]"),
        "display": command(display_command, "Usage: uva display <problem_number>"),
        "leaderboard": command(leaderboard_command, "Usage: uva leaderboard <problem_number>"),
        "userdata": command(user_submissions_command, "Usage: uva userdata <user> [n]"),
        "test": command(testcases_command, "Usage: uva test <problem_num>")
    }

    if len(sys.argv) == 1:
        command = ""
    else:
        command = sys.argv[1]
    sys.argv = sys.argv[2:]

    if command in commands:
        u = uvaclient()
        commands[command](u, sys.argv)

    else:
        print_commands()
