#!/usr/bin/env python
from uvaclient import uvaclient
import sys
import requests
import os

class command():
    def __init__(self, func, h):
        self.func = func
        self.h = h

    def __call__(self, *args):
        self.func(*args)

def sub_command(client, args):
    resp = client.submissions(*args)
    for i in resp:
        print i["problem"]["title"] + " - " + i["verdict"] + " - " + i["runtime"]

def submit_command(client, args):
    print "Logging in..."
    client.login()
    print "Submitting..."
    client.submit(*args)
    print "Done!"

def display_command(client, args):
    url = client.get_baseurl() + "external/{0}/{1}.pdf"\
            .format(int(args[0]) / 100, args[0])
    resp = requests.get(url, stream=True)
    with open(args[0] + ".pdf", "wb") as f:
        for block in resp.iter_content(1024):
            f.write(block)
    os.system("open " + args[0] + ".pdf")

def help_command(client, args):
    print_commands()

def print_commands():
    print "Commands:"
    for name in commands.keys():
        if (name != "help"):
          print "\t" + name + " - " + commands[name].h

def leaderboard_command(client, args):
    resp = client.leaderboard(*args)
    print "Problem " + str(args[0]) + ": " + client.get_problem_name(args[0])
    for i in resp:
        print "Rank: " + str(i['rank'])  + " User: " + i['uname']

def user_submissions_problem_command(client, args):
    resp = client.user_submissions_problem(args[0], args[1])
    for i in resp:
        print "Submission ID: %-12s Verdict: %-20s Runtime: %-11s Language Used: %-10s"  % (i["submission_id"], i["verdict"], i["runtime"], i["language"])

def testcases_command(client, args):
    resp = client.testcases(args[0])
    if (resp == ""):
        print "There were no pre-generated test cases available :("
    else :
        print "Testing your solution!"
        f = open("input", 'w')
        f.write(resp)
        f.close()
        os.system("/usr/local/bin/g++-5 -std=c++11 " + args[1])
        os.system("./a.out < input")
        os.remove("input")

if __name__ == "__main__":
    commands = {
        "help": command(help_command, ""),
        "subs": command(sub_command, "Usage: uva subs [n]"),
        "submit": command(submit_command, "Usage: uva submit <problem_number> <source_file> [language code]"),
        "display": command(display_command, "Usage: uva display <problem_number>"),
        "leaderboard": command(leaderboard_command, "Usage: leaderboard <problem_number>"),
        "userdata": command(user_submissions_problem_command, "Usage: userdata <user> <problem_number>"),
        "test": command(testcases_command, "Usage: test <problem_num> <source_file>") # only c++11 is supported atm
    }

    if len(sys.argv) == 1:
        command = ""
    else:
        command = sys.argv[1]
    sys.argv = sys.argv[2:]

    if command in commands:
        u = uvaclient()
        commands[command](u, sys.argv)

    else:
        print_commands()
